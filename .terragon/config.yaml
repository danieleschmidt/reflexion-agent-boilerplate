# Terragon Autonomous SDLC Configuration
# This configuration enables continuous value discovery and autonomous enhancement

metadata:
  repository: "reflexion-agent-boilerplate"
  maturity_level: "maturing"  # Current: 70-75%, Target: 85%+
  last_assessment: "2025-08-01T02:56:00Z"
  target_maturity: "advanced"

scoring:
  weights:
    # Weights adjusted for maturing repositories
    wsjf: 0.5              # Weighted Shortest Job First
    ice: 0.2               # Impact, Confidence, Ease
    technical_debt: 0.2    # Technical debt impact
    security: 0.1          # Security improvements
  
  thresholds:
    min_score: 15          # Minimum composite score to execute
    max_risk: 0.7          # Maximum risk threshold
    security_boost: 2.0    # Security vulnerability boost factor
    compliance_boost: 1.8  # Compliance issue boost factor

discovery:
  sources:
    - git_history           # Parse commit messages, TODOs, FIXMEs
    - static_analysis       # Code quality and complexity analysis
    - dependency_scan       # Vulnerability and update checking
    - performance_metrics   # Performance regression detection
    - compliance_gaps       # Regulatory and standard compliance
    - documentation_debt    # Documentation completeness analysis
  
  tools:
    static_analysis:
      - ruff                # Python linting and formatting
      - mypy                # Type checking
      - bandit              # Security scanning
      - radon               # Complexity analysis
    security:
      - safety              # Dependency vulnerability scanning
      - pip-audit           # Python package auditing
      - semgrep             # Static analysis security tool
    performance:
      - pytest-benchmark    # Performance regression testing
      - memory-profiler     # Memory usage analysis
    quality:
      - coverage            # Test coverage analysis
      - pylint              # Code quality scoring

execution:
  max_concurrent_tasks: 1
  default_branch: "main"
  feature_branch_prefix: "auto-value"
  
  test_requirements:
    min_coverage: 80       # Minimum test coverage percentage
    performance_regression: 5  # Max allowed performance regression %
    security_scan_pass: true   # Must pass security scans
  
  rollback_triggers:
    - test_failure
    - build_failure  
    - security_violation
    - coverage_drop

automation:
  schedules:
    immediate:             # After each PR merge
      - value_discovery
      - next_item_selection
    hourly:               # Every hour
      - security_scan
      - dependency_check
    daily:                # Daily at 2 AM UTC
      - comprehensive_analysis
      - debt_assessment
    weekly:               # Weekly on Mondays at 3 AM UTC
      - deep_architecture_review
      - performance_optimization
    monthly:              # Monthly on 1st at 4 AM UTC
      - strategic_alignment
      - scoring_recalibration

# Value discovery patterns and priorities
patterns:
  high_value:
    - security_vulnerabilities
    - performance_bottlenecks  
    - compliance_gaps
    - critical_bugs
    - api_breaking_changes
  
  medium_value:
    - technical_debt_hotspots
    - documentation_gaps
    - test_coverage_improvements
    - dependency_updates
    - code_quality_issues
  
  low_value:
    - cosmetic_changes
    - minor_refactoring
    - style_improvements
    - non_critical_dependencies

# Repository-specific value drivers
value_drivers:
  framework_compatibility: 0.8  # Multi-framework support importance
  security_posture: 0.9         # Security is critical for AI systems
  performance: 0.7              # Performance matters for agents
  maintainability: 0.8          # Long-term maintenance focus
  documentation: 0.6            # Good docs but not critical path
  testing: 0.9                  # High test coverage required

# Continuous learning configuration
learning:
  track_prediction_accuracy: true
  adjust_weights_based_on_outcomes: true
  learning_rate: 0.1
  confidence_threshold: 0.7
  
  feedback_sources:
    - pr_review_comments
    - issue_resolution_time
    - deployment_success_rate
    - user_adoption_metrics

# Integration settings
integrations:
  github:
    create_issues: true
    assign_reviewers: true
    use_codeowners: true
    milestone_tracking: true
  
  monitoring:
    prometheus_endpoint: "http://localhost:9090"
    grafana_dashboard: true
    alerting_enabled: true
  
  notifications:
    slack_webhook: null        # Configure if available
    email_reports: true
    dashboard_url: null

# Risk management
risk_management:
  max_changes_per_pr: 5
  require_review_for_critical: true
  rollback_on_failure: true
  canary_deployment_strategy: false  # Not applicable for libraries
  
  critical_files:
    - "src/reflexion/core/*"
    - "pyproject.toml"
    - "README.md"
    - "SECURITY.md"

# Success metrics tracking
metrics:
  kpis:
    - repository_maturity_score
    - technical_debt_reduction
    - security_vulnerability_count
    - test_coverage_percentage
    - documentation_completeness
    - performance_benchmark_scores
  
  targets:
    maturity_score: 85         # Target advanced level
    technical_debt_ratio: 0.15 # Max 15% technical debt
    security_issues: 0         # Zero critical vulnerabilities
    test_coverage: 90          # 90% test coverage
    performance_regression: 0  # No performance regressions

# Advanced features for mature repositories
advanced:
  enable_ai_assisted_reviews: true
  automated_performance_optimization: true
  intelligent_dependency_management: true
  predictive_maintenance: true
  cross_repository_learning: false  # Single repo focus