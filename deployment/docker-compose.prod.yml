version: '3.8'

services:
  reflexion-agent:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: production
    image: reflexion-agent:production
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "8001:8001"  # Health check port
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - WORKERS=4
      - MAX_CONCURRENT_REQUESTS=100
      - ENABLE_QUANTUM_ENHANCEMENT=true
      - ENABLE_AUTONOMOUS_SCALING=true
      - ENABLE_ADVANCED_MONITORING=true
      - SECURITY_STRICT_MODE=true
      - RATE_LIMIT_REQUESTS_PER_HOUR=1000
      - OPENTELEMETRY_ENABLED=true
    volumes:
      - reflexion_logs:/app/logs
      - reflexion_cache:/app/cache
      - reflexion_models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    networks:
      - reflexion_network
    depends_on:
      - redis
      - postgres
      - prometheus

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server
      --appendonly yes
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - reflexion_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=reflexion
      - POSTGRES_USER=reflexion_user
      - POSTGRES_PASSWORD=reflexion_secure_password_change_in_production
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../deployment/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U reflexion_user -d reflexion"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - reflexion_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ../deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - reflexion_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_change_in_production
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ../deployment/grafana/provisioning:/etc/grafana/provisioning:ro
      - ../deployment/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - reflexion_network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../deployment/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - reflexion_network
    depends_on:
      - reflexion-agent
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - reflexion_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - reflexion_network
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  jaeger:
    image: jaegertracing/all-in-one:latest
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - reflexion_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

volumes:
  reflexion_logs:
    driver: local
  reflexion_cache:
    driver: local
  reflexion_models:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  reflexion_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16